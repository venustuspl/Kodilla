12_3

1.
CREATE TABLE ISSUESLISTS (
ID SERIAL PRIMARY KEY,
NAME VARCHAR(20)
);
2.
CREATE TABLE ISSUES (
ID SERIAL PRIMARY KEY,
ISSUESLIST_ID BIGINT UNSIGNED NOT NULL,
SUMMARY VARCHAR(20),
DESCRIPTION VARCHAR(100),
USER_ID_ASSIGNEDTO BIGINT UNSIGNED NOT NULL,
FOREIGN KEY (ISSUESLIST_ID) REFERENCES ISSUESLISTS(ID),
FOREIGN KEY (USER_ID_ASSIGNEDTO) REFERENCES USERS(ID)
);

3.
INSERT INTO ISSUESLISTS (ID, NAME) VALUES (1, 'To Do');
INSERT INTO ISSUESLISTS (ID, NAME) VALUES (2, 'In progress');
INSERT INTO ISSUESLISTS (ID, NAME) VALUES (3, 'Done');
4.
INSERT INTO ISSUES ( ISSUESLIST_ID, SUMMARY,DESCRIPTION,USER_ID_ASSIGNEDTO) VALUES (1,'TEST 1', 'OPISOWY OPIS ', 1);
INSERT INTO ISSUES ( ISSUESLIST_ID, SUMMARY,DESCRIPTION,USER_ID_ASSIGNEDTO) VALUES (2,'TEST 1', 'OPISOWY OPIS ', 5);
INSERT INTO ISSUES ( ISSUESLIST_ID, SUMMARY,DESCRIPTION,USER_ID_ASSIGNEDTO) VALUES (3,'TEST 1', 'OPISOWY OPIS ', 5);
---

12_4

1.
SELECT I.ID, I.ISSUESLIST_ID, I.SUMMARY, I.DESCRIPTION, I.USER_ID_ASSIGNEDTO , ISS.NAME FROM
ISSUES I JOIN ISSUESLISTS ISS
ON
I.ISSUESLIST_ID = ISS.ID;

2.
SELECT I.ID, I.ISSUESLIST_ID, I.SUMMARY, I.DESCRIPTION, I.USER_ID_ASSIGNEDTO , U.FIRSTNAME, U.LASTNAME FROM
ISSUES I JOIN USERS U
ON
I.USER_ID_ASSIGNEDTO = U.ID;

3
SELECT U.FIRSTNAME, U.LASTNAME, COUNT(*) AS ISSUES_NUMBER FROM USERS U JOIN ISSUES I ON
I.USER_ID_ASSIGNEDTO = U.ID
GROUP BY I.USER_ID_ASSIGNEDTO HAVING COUNT(*) > 0;
---
12_5

insert INTO posts (USER_ID,BODY)VALUES (1, 'TEXT');

delete from issues iss
where
iss.id = 16
;
commit;
select * from issues;

update issues iss
set
iss.description = 'To delete'
where id =17;
commit;
select * from issues;